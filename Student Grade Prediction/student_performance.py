# -*- coding: utf-8 -*-
"""student_performance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E87Sq1iu8Wudsfy7ez91Vc9EhHkyFBWl

# Import Libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt
import seaborn as sns

"""# Import Data"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

import io 
  
maths = pd.read_csv(io.StringIO(uploaded['student-mat.csv'].decode('utf-8')))

print(maths.info())
maths.head()

"""# Visual-EDA"""

fig, axes = plt.subplots(2, 2, figsize=(16,12))

sns.regplot('G2', 'G3', data=maths, ax=axes[0, 0]).set_title('G2 vs G3 grades')
sns.swarmplot('failures', 'G3', data=maths, ax=axes[1, 0]).set_title('Effect of Failures on Final Grade')
sns.swarmplot('famrel', 'G3', data=maths, ax=axes[0, 1]).set_title('Effect of Family Relationships on Final Grade')
sns.swarmplot('studytime', 'G3', data=maths, ax=axes[1, 1]).set_title('Effect of Studytime on Final Grade')
plt.tight_layout()
plt.show()

"""# Linear Regression Implementation"""

maths = maths.select_dtypes('int64')
maths = maths[['famrel', 'studytime', 'failures', 'absences', 'G1', 'G2', 'G3']]
print(maths.info())

# set our prediction of a students final score (G3)
predict = 'G3'

# split-up X & y and make sure that they are np arrays
# sklearn needs numpy array's as inputs
X = np.array(maths.drop(predict, axis=1))
y = np.array(maths[predict])

# split-up our current X & y variables into training and testing data

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.8, random_state=42)

# Now we need to initiate our model and train it

linear = LinearRegression()
linear.fit(X_train, y_train)

# Lets take a look at how well this model performs
print("The R^2 is: ", linear.score(X_test, y_test))
coeff = linear.coef_
intercept = linear.intercept_

for i in range(len(coeff)):
  print(maths.columns[i], ': ', coeff[i])
print('The intercept of our slope is: ', intercept)

"""In conclusion our model explains 83% of the inputs into a students final score. What we can clearly see is the biggest factor going into the estimation is the score that they would get in G2. What does look interesting is the fact that studytime is negatively related to the grade that they get, however this is a very small factor."""